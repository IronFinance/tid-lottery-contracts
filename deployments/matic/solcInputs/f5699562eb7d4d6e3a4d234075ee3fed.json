{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20Burnable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Burnable is IERC20 {\n    function burn(uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/TaxService.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/ITaxService.sol\";\nimport \"./interfaces/IERC20Burnable.sol\";\n\ncontract TaxService is Ownable, ITaxService, Initializable {\n    using SafeERC20 for IERC20Burnable;\n\n    address public titan_;\n    address public lottery_;\n    address public prizeReservePool_;\n\n    uint256 public reservePoolRatio_ = 300000; // 30%\n    uint256 public burnTitanPoolRatio_ = 700000; // 70%\n\n    uint256 private constant PRECISION = 1e6;\n\n    function initialize(\n        address _titan,\n        address _lottery,\n        address _prizeReservePool\n    ) external initializer onlyOwner() {\n        require(\n            _titan != address(0) && _lottery != address(0) && _prizeReservePool != address(0),\n            \"Contracts cannot be 0 address\"\n        );\n        titan_ = _titan;\n        lottery_ = _lottery;\n        prizeReservePool_ = _prizeReservePool;\n    }\n\n    //-------------------------------------------------------------------------\n    // MODIFIERS\n    //-------------------------------------------------------------------------\n\n    /**\n     * @notice  Restricts to only the lottery contract.\n     */\n    modifier onlyLottery() {\n        require(address(msg.sender) == lottery_, \"Caller is not the lottery\");\n        _;\n    }\n\n    //==============================\n    // STATE MODIFYING FUNCTIONS\n    //==============================\n\n    function setPrizeReservePool(address _prizeReservePool) external onlyOwner {\n        require(_prizeReservePool != address(0), \"Contracts cannot be 0 address\");\n        prizeReservePool_ = _prizeReservePool;\n    }\n\n    function setLottery(address _lottery) external onlyOwner {\n        lottery_ = _lottery;\n    }\n\n    function setDistribution(uint256 _reservePoolRatio, uint256 _burnTitanPoolRatio) external onlyOwner {\n        reservePoolRatio_ = _reservePoolRatio;\n        burnTitanPoolRatio_ = _burnTitanPoolRatio;\n    }\n\n    function collect(uint256 amount) external override onlyLottery {\n        uint256 _totalRatio = burnTitanPoolRatio_ + reservePoolRatio_;\n        uint256 _burnTitanAmount = (amount * burnTitanPoolRatio_) / _totalRatio;\n        uint256 _prizeReserve = amount - _burnTitanAmount;\n\n        IERC20Burnable _titan = IERC20Burnable(titan_);\n        _titan.safeTransferFrom(lottery_, address(this), amount);\n\n        if (_prizeReserve > 0) {\n            _titan.safeTransfer(prizeReservePool_, _prizeReserve);\n        }\n\n        if (_burnTitanAmount > 0) {\n            _titan.burn(_burnTitanAmount);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ITaxService.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface ITaxService {\r\n    /**\r\n     * collect iron\r\n     * @param amount amount of IRON\r\n     */\r\n    function collect(uint256 amount) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Lottery.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IRandomNumberGenerator.sol\";\nimport \"./interfaces/ITicket.sol\";\nimport \"./utils/Testable.sol\";\nimport \"./interfaces/ITaxService.sol\";\nimport \"./interfaces/IPrizeReservePool.sol\";\n\ncontract Lottery is Ownable, Initializable, Testable {\n    // using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    // Represents the status of the lottery\n    enum Status {\n        NotStarted, // The lottery has not started yet\n        Open, // The lottery is open for ticket purchases\n        Closed, // The lottery is no longer open for ticket purchases\n        Completed // The numbers drawn\n    }\n\n    // All the needed info around a lottery\n    struct LottoInfo {\n        uint256 lotteryID; // ID for lotto\n        Status lotteryStatus; // Status for lotto\n        uint256 prizePool; // The amount of TITAN for prize money\n        uint256 costPerTicket; // Cost per ticket in $TITAN\n        uint256[] prizeDistribution; // The distribution for prize money\n        uint256 startingTimestamp; // Block timestamp for star of lotto\n        uint256 closingTimestamp; // Block timestamp for end of entries\n        uint16[] winningNumbers; // The winning numbers\n        uint256[] winners; // the winners of each prize\n    }\n\n    // State variables\n    // Instance of TITAN token (collateral currency for lotto)\n    IERC20 internal titan_;\n    // Storing of the NFT\n    ITicket internal ticket_;\n\n    // Random number generator\n    // Storing of the randomness generator\n    IRandomNumberGenerator internal randomGenerator_;\n    // Instance of TaxCollection\n    ITaxService internal taxService_;\n    // Request ID for random number\n    bytes32 internal requestId_;\n\n    // Counter for lottery IDs\n    uint256 private lotteryIdCounter_;\n\n    // These stated is fixed due to technical implementation\n    // Lottery size, power number not included\n    uint8 public constant sizeOfLottery_ = 4;\n    // support 2 numbers match, if require 3 numbers match, use value of 5\n    // uint8 public constant sizeOfIndex_ = 5;\n\n    // precision for all distribution\n    uint256 public constant PRECISION = 1e6;\n    uint256 public unclaimedPrize_;\n    address public controller_;\n    address public zap_;\n\n    // Max range for numbers (starting at 0)\n    uint16 public maxValidRange_;\n    uint16 public powerBallRange_;\n\n    // settings for lotto, will be applied to newly created lotto\n    uint256 public startingPrize_;\n    uint256 public costPerTicket_; // Cost per ticket in $TITAN\n\n    // The distribution for prize money, highest first\n    uint256[] public prizeDistribution_;\n\n    uint256 public taxRate_;\n    address public prizeReservePool_;\n\n    // Lottery ID's to info\n    mapping(uint256 => LottoInfo) internal allLotteries_;\n\n    bool public upgraded_ = false;\n\n    //-------------------------------------------------------------------------\n    // EVENTS\n    //-------------------------------------------------------------------------\n\n    event NewBatchMint(address indexed minter, uint256[] ticketIDs, uint16[] numbers, uint256 pricePaid);\n\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\n\n    event LotterySettingsUpdated(\n        uint16 maxValidRange,\n        uint16 powerBallRange,\n        uint256[] prizeDistribution,\n        uint256 startingPrize,\n        uint256 costPerTicket\n    );\n\n    event LotteryOpened(uint256 lotteryId, uint256 ticketSupply);\n\n    event LotteryClosed(uint256 lotteryId, uint256 ticketSupply);\n\n    event WinnersDrawn(uint256[] numbers);\n\n    //-------------------------------------------------------------------------\n    // MODIFIERS\n    //-------------------------------------------------------------------------\n\n    modifier onlyRandomGenerator() {\n        require(msg.sender == address(randomGenerator_), \"Only random generator\");\n        _;\n    }\n\n    modifier onlyController() {\n        require(msg.sender == controller_, \"Only controller\");\n        _;\n    }\n\n    modifier notContract() {\n        require(!address(msg.sender).isContract(), \"contract not allowed\");\n        // solhint-disable-next-line avoid-tx-origin\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\n        _;\n    }\n\n    modifier notUpgraded() {\n        require(upgraded_ == false, \"This contract was upgraded\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    // CONSTRUCTOR\n    //-------------------------------------------------------------------------\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _timer) Testable(_timer) {}\n\n    function initialize(\n        address _titan,\n        address _ticket,\n        address _randomNumberGenerator,\n        address _prizeReservePool,\n        address _taxService,\n        address _controller\n    ) external initializer onlyOwner {\n        require(\n            _ticket != address(0) &&\n                _randomNumberGenerator != address(0) &&\n                _prizeReservePool != address(0) &&\n                _taxService != address(0) &&\n                _titan != address(0),\n            \"Contracts cannot be 0 address\"\n        );\n        titan_ = IERC20(_titan);\n        ticket_ = ITicket(_ticket);\n        randomGenerator_ = IRandomNumberGenerator(_randomNumberGenerator);\n        prizeReservePool_ = _prizeReservePool;\n        taxService_ = ITaxService(_taxService);\n        controller_ = _controller;\n    }\n\n    //-------------------------------------------------------------------------\n    // VIEW FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    function costToBuyTickets(uint256 _lotteryId, uint256 _numberOfTickets) external view returns (uint256 totalCost) {\n        uint256 pricePer = allLotteries_[_lotteryId].costPerTicket;\n        totalCost = pricePer * _numberOfTickets; // solidity 0.8 auto handle overflow\n    }\n\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\n        return (allLotteries_[_lotteryId]);\n    }\n\n    function getCurrentLotto() external view returns (LottoInfo memory) {\n        require(lotteryIdCounter_ > 0, \"no lottery created\");\n        return allLotteries_[lotteryIdCounter_];\n    }\n\n    function getCurrentTotalPrize() public view returns (uint256 totalPrize) {\n        totalPrize = titan_.balanceOf(address(this)) - unclaimedPrize_;\n    }\n\n    function getMaxRange() external view returns (uint16) {\n        return maxValidRange_;\n    }\n\n    function getCurrentPrizes() public view returns (uint256[] memory prizes) {\n        require(lotteryIdCounter_ > 0, \"no lottery created\");\n        LottoInfo storage lotto = allLotteries_[lotteryIdCounter_];\n        prizes = new uint256[](lotto.prizeDistribution.length);\n\n        uint256 totalPrize = getCurrentTotalPrize();\n        for (uint256 i = 0; i < lotto.prizeDistribution.length; i++) {\n            prizes[i] = (totalPrize * lotto.prizeDistribution[i]) / PRECISION;\n        }\n    }\n\n    //-------------------------------------------------------------------------\n    // Restricted Access Functions (onlyOwner)\n\n    /**\n     * manually start by admin, by pass auto duration\n     */\n    function manualStartLotto(uint256 _startingTime, uint256 _closingTime) external onlyController returns (uint256) {\n        return _createNewLotto(_startingTime, _closingTime);\n    }\n\n    function manuallyOpenLotto() external onlyController {\n        require(lotteryIdCounter_ > 0, \"no lottery created\");\n        LottoInfo storage _currLotto = allLotteries_[lotteryIdCounter_];\n        uint256 currentTime = getCurrentTime();\n        require(currentTime >= _currLotto.startingTimestamp, \"Invalid time for mint:start\");\n        require(currentTime < _currLotto.closingTimestamp, \"Invalid time for mint:end\");\n        if (_currLotto.lotteryStatus == Status.NotStarted) {\n            if (_currLotto.startingTimestamp <= getCurrentTime()) {\n                _currLotto.lotteryStatus = Status.Open;\n            }\n        }\n    }\n\n    function setTaxRate(uint256 _taxRate) external onlyOwner {\n        require(_taxRate <= PRECISION, \"total must lower than 100%\");\n        taxRate_ = _taxRate;\n    }\n\n    function setController(address _controller) external onlyOwner {\n        require(_controller != address(0), \"Contracts cannot be 0 address\");\n        controller_ = _controller;\n    }\n\n    function setPrizeReservePool(address _prizeReservePool) external onlyOwner {\n        require(_prizeReservePool != address(0), \"Contracts cannot be 0 address\");\n        prizeReservePool_ = _prizeReservePool;\n    }\n\n    function setTaxService(address _taxService) external onlyOwner {\n        require(_taxService != address(0), \"Contracts cannot be 0 address\");\n        taxService_ = ITaxService(_taxService);\n    }\n\n    function setRandomGenerator(address _randomGenerator) external onlyOwner {\n        require(_randomGenerator != address(0), \"Contracts cannot be 0 address\");\n        randomGenerator_ = IRandomNumberGenerator(_randomGenerator);\n    }\n\n    function setTicket(address _ticket) external onlyOwner {\n        require(_ticket != address(0), \"Contracts cannot be 0 address\");\n        ticket_ = ITicket(_ticket);\n    }\n\n    function withdrawFund(address receiver) external onlyOwner {\n        require(receiver != address(0), \"Invalid address\");\n        uint256 _movableAmount = getCurrentTotalPrize();\n        upgraded_ = true;\n        titan_.safeTransfer(receiver, _movableAmount);\n    }\n\n    /**\n     * @param   _prizeDistribution An array defining the distribution of the\n     *          prize pool. I.e if a lotto has 5 numbers, the distribution could\n     *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\n     *          right you get 5% of the pool, 2 matching would be 10% and so on.\n     */\n    function updateLottoSettings(\n        uint16 _maxValidRange,\n        uint16 _powerBallRange,\n        uint256[] calldata _prizeDistribution,\n        uint256 _costPerTicket,\n        uint256 _startingPrize\n    ) external onlyOwner {\n        require(_maxValidRange >= 4, \"Range of number must be 4 atleast\");\n        require(_powerBallRange != 0, \"Power number range can not be 0\");\n        require(_startingPrize != 0 && _costPerTicket != 0, \"Prize or cost cannot be 0\");\n        // Ensuring that prize distribution total is 100%\n        uint256 prizeDistributionTotal = 0;\n        for (uint256 j = 0; j < _prizeDistribution.length; j++) {\n            prizeDistributionTotal = prizeDistributionTotal + uint256(_prizeDistribution[j]);\n        }\n        require(prizeDistributionTotal == PRECISION, \"Prize distribution is not 100%\");\n\n        maxValidRange_ = _maxValidRange;\n        powerBallRange_ = _powerBallRange;\n        prizeDistribution_ = _prizeDistribution;\n        startingPrize_ = _startingPrize;\n        costPerTicket_ = _costPerTicket;\n\n        emit LotterySettingsUpdated(\n            maxValidRange_,\n            powerBallRange_,\n            prizeDistribution_,\n            startingPrize_,\n            costPerTicket_\n        );\n    }\n\n    function drawWinningNumbers(uint256 _lotteryId) external onlyController notUpgraded {\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\n        // Checks that the lottery is past the closing block\n        require(_currLotto.closingTimestamp <= getCurrentTime(), \"Cannot set winning numbers during lottery\");\n        // Checks lottery numbers have not already been drawn\n        require(_currLotto.lotteryStatus == Status.Open, \"Lottery State incorrect for draw\");\n        // Sets lottery status to closed\n        _currLotto.lotteryStatus = Status.Closed;\n        // Sets prize pool\n        _currLotto.prizePool = getCurrentTotalPrize();\n        // Requests a random number from the generator\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId);\n        // Emits that random number has been requested\n        emit RequestNumbers(_lotteryId, requestId_);\n    }\n\n    function retryDrawWinningNumbers(uint256 _lotteryId) external onlyController notUpgraded {\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\n        require(_currLotto.closingTimestamp <= getCurrentTime(), \"Cannot set winning numbers during lottery\");\n        require(_currLotto.lotteryStatus == Status.Closed, \"Lottery State incorrect for retry\");\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId);\n        emit RequestNumbers(_lotteryId, requestId_);\n    }\n\n    function numbersDrawn(\n        uint256 _lotteryId,\n        bytes32 _requestId,\n        uint256 _randomNumber\n    ) external onlyRandomGenerator() notUpgraded {\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\n        require(_currLotto.lotteryStatus == Status.Closed, \"Draw numbers first\");\n        if (requestId_ == _requestId) {\n            _currLotto.winningNumbers = _split(_randomNumber);\n            uint256[] memory matches = ticket_.countMatch(_lotteryId, maxValidRange_, _currLotto.winningNumbers);\n            _currLotto.lotteryStatus = Status.Completed;\n            uint256 _actualPrizeDistribution = 0;\n            for (uint256 i = 0; i < _currLotto.prizeDistribution.length; i++) {\n                _currLotto.winners[i] = matches[i];\n                if (matches[i] > 0) {\n                    _actualPrizeDistribution = _actualPrizeDistribution + _currLotto.prizeDistribution[i];\n                }\n            }\n            uint256 _totalPrize = (getCurrentTotalPrize() * _actualPrizeDistribution) / PRECISION;\n            if (_totalPrize > 0) {\n                uint256 _taxAmount = (_totalPrize * taxRate_) / PRECISION;\n                uint256 _prizeAfterTax = _totalPrize - _taxAmount;\n                _addUnclaimedPrize(_prizeAfterTax);\n                _collectTax(_taxAmount);\n            }\n        }\n\n        emit LotteryClosed(_lotteryId, ticket_.getTotalSupply());\n    }\n\n    //-------------------------------------------------------------------------\n    // General Access Functions\n\n    function batchBuyLottoTicket(\n        uint256 _lotteryId,\n        uint8 _numberOfTickets,\n        uint16[] calldata _chosenNumbersForEachTicket\n    ) external notContract() notUpgraded {\n        // Ensuring the lottery is within a valid time\n        uint256 currentTime = getCurrentTime();\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\n        require(currentTime >= _currLotto.startingTimestamp, \"Invalid time for mint:start\");\n        require(currentTime < _currLotto.closingTimestamp, \"Invalid time for mint:end\");\n\n        if (_currLotto.lotteryStatus == Status.NotStarted) {\n            if (_currLotto.startingTimestamp <= getCurrentTime()) {\n                _currLotto.lotteryStatus = Status.Open;\n            }\n        }\n\n        require(_currLotto.lotteryStatus == Status.Open, \"Lottery not in state for mint\");\n        validateTicketNumbers(_numberOfTickets, _chosenNumbersForEachTicket);\n        uint256 totalCost = this.costToBuyTickets(_lotteryId, _numberOfTickets);\n\n        // Batch mints the user their tickets\n        uint256[] memory ticketIds = ticket_.batchMint(\n            msg.sender,\n            _lotteryId,\n            _numberOfTickets,\n            maxValidRange_,\n            _chosenNumbersForEachTicket\n        );\n\n        // Emitting event with all information\n        emit NewBatchMint(msg.sender, ticketIds, _chosenNumbersForEachTicket, totalCost);\n\n        // Transfers the required titan to this contract\n        titan_.safeTransferFrom(msg.sender, address(this), totalCost);\n    }\n\n    function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\n        // Checking the lottery is in a valid time for claiming\n        require(allLotteries_[_lotteryId].closingTimestamp <= getCurrentTime(), \"Wait till end to claim\");\n        // Checks the lottery winning numbers are available\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \"Winning Numbers not chosen yet\");\n        require(ticket_.getOwnerOfTicket(_tokenId) == msg.sender, \"Only the owner can claim\");\n        // Sets the claim of the ticket to true (if claimed, will revert)\n        require(ticket_.claimTicket(_tokenId, _lotteryId), \"Numbers for ticket invalid\");\n        // Getting the number of matching tickets\n        uint8 matchingNumbers = _getNumberOfMatching(\n            ticket_.getTicketNumbers(_tokenId),\n            allLotteries_[_lotteryId].winningNumbers\n        );\n        // Getting the prize amount for those matching tickets\n        uint256 prizeAmount = _prizeForMatching(matchingNumbers, _lotteryId);\n        // Transfering the user their winnings\n        _claimPrize(msg.sender, prizeAmount);\n    }\n\n    function batchClaimRewards(uint256 _lotteryId, uint256[] calldata _tokeIds) external notContract() {\n        require(_tokeIds.length <= 50, \"Batch claim too large\");\n        // Checking the lottery is in a valid time for claiming\n        require(allLotteries_[_lotteryId].closingTimestamp <= getCurrentTime(), \"Wait till end to claim\");\n        // Checks the lottery winning numbers are available\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \"Winning Numbers not chosen yet\");\n        // Creates a storage for all winnings\n        uint256 totalPrize = 0;\n        // Loops through each submitted token\n        for (uint256 i = 0; i < _tokeIds.length; i++) {\n            // Checks user is owner (will revert entire call if not)\n            require(ticket_.getOwnerOfTicket(_tokeIds[i]) == msg.sender, \"Only the owner can claim\");\n            // If token has already been claimed, skip token\n            if (ticket_.getTicketClaimStatus(_tokeIds[i])) {\n                continue;\n            }\n            // Claims the ticket (will only revert if numbers invalid)\n            require(ticket_.claimTicket(_tokeIds[i], _lotteryId), \"Numbers for ticket invalid\");\n            // Getting the number of matching tickets\n            uint8 matchingNumbers = _getNumberOfMatching(\n                ticket_.getTicketNumbers(_tokeIds[i]),\n                allLotteries_[_lotteryId].winningNumbers\n            );\n            // Getting the prize amount for those matching tickets\n            uint256 prizeAmount = _prizeForMatching(matchingNumbers, _lotteryId);\n            totalPrize = totalPrize + prizeAmount;\n        }\n        // Transferring the user their winnings\n        _claimPrize(msg.sender, totalPrize);\n    }\n\n    //-------------------------------------------------------------------------\n    // INTERNAL FUNCTIONS\n    //-------------------------------------------------------------------------\n    /**\n     * @param   _startingTimestamp The block timestamp for the beginning of the\n     *          lottery.\n     * @param   _closingTimestamp The block timestamp after which no more tickets\n     *          will be sold for the lottery. Note that this timestamp MUST\n     *          be after the starting block timestamp.\n     */\n    function _createNewLotto(uint256 _startingTimestamp, uint256 _closingTimestamp)\n        internal\n        notUpgraded\n        returns (uint256 lotteryId)\n    {\n        require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \"Timestamps for lottery invalid\");\n        require(\n            lotteryIdCounter_ == 0 || allLotteries_[lotteryIdCounter_].lotteryStatus == Status.Completed,\n            \"current lottery is not completed\"\n        );\n        // Incrementing lottery ID\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\n        lotteryId = lotteryIdCounter_;\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_ + 1);\n        uint256[] memory winnersCount = new uint256[](prizeDistribution_.length);\n        Status lotteryStatus;\n        if (_startingTimestamp > getCurrentTime()) {\n            lotteryStatus = Status.NotStarted;\n        } else {\n            lotteryStatus = Status.Open;\n        }\n\n        //transfer from reserve pool to poolPrize if current < minPrize\n        if (getCurrentTotalPrize() < startingPrize_) {\n            IPrizeReservePool(prizeReservePool_).fund(startingPrize_ - getCurrentTotalPrize());\n        }\n\n        // Saving data in struct\n        LottoInfo memory newLottery = LottoInfo(\n            lotteryId,\n            lotteryStatus,\n            startingPrize_,\n            costPerTicket_,\n            prizeDistribution_,\n            _startingTimestamp,\n            _closingTimestamp,\n            winningNumbers,\n            winnersCount\n        );\n        allLotteries_[lotteryId] = newLottery;\n\n        // Emitting important information around new lottery.\n        emit LotteryOpened(lotteryId, ticket_.getTotalSupply());\n    }\n\n    function _getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\n        internal\n        pure\n        returns (uint8 noOfMatching)\n    {\n        // Loops through all winning numbers\n        for (uint256 i = 0; i < _winningNumbers.length - 1; i++) {\n            for (uint256 j = 0; j < _usersNumbers.length - 1; j++) {\n                // If the winning numbers and user numbers match\n                if (_usersNumbers[i] == _winningNumbers[j]) {\n                    // The number of matching numbers increases\n                    noOfMatching += 1;\n                }\n            }\n        }\n\n        // compare power number\n        if (\n            noOfMatching == sizeOfLottery_ &&\n            _winningNumbers[_winningNumbers.length - 1] == _usersNumbers[_usersNumbers.length - 1]\n        ) {\n            noOfMatching += 1;\n        }\n    }\n\n    function _claimPrize(address _winner, uint256 _amount) internal {\n        unclaimedPrize_ = unclaimedPrize_ - _amount;\n        titan_.safeTransfer(_winner, _amount);\n    }\n\n    function _addUnclaimedPrize(uint256 amount) internal {\n        unclaimedPrize_ = unclaimedPrize_ + amount;\n    }\n\n    function _collectTax(uint256 _taxAmount) internal {\n        titan_.safeApprove(address(taxService_), 0);\n        titan_.safeApprove(address(taxService_), _taxAmount);\n        taxService_.collect(_taxAmount);\n    }\n\n    /**\n     * @param   _noOfMatching: The number of matching numbers the user has\n     * @param   _lotteryId: The ID of the lottery the user is claiming on\n     * @return  prize  The prize amount in cake the user is entitled to\n     */\n    function _prizeForMatching(uint8 _noOfMatching, uint256 _lotteryId) public view returns (uint256 prize) {\n        prize = 0;\n        if (_noOfMatching > 0) {\n            // Getting the percentage of the pool the user has won\n            uint256 prizeIndex = sizeOfLottery_ + 1 - _noOfMatching;\n            uint256 perOfPool = allLotteries_[_lotteryId].prizeDistribution[prizeIndex];\n            uint256 numberOfWinners = allLotteries_[_lotteryId].winners[prizeIndex];\n\n            if (numberOfWinners > 0) {\n                prize =\n                    (allLotteries_[_lotteryId].prizePool * perOfPool * (PRECISION - taxRate_)) /\n                    numberOfWinners /\n                    (PRECISION**2);\n            }\n        }\n    }\n\n    function _split(uint256 _randomNumber) internal view returns (uint16[] memory) {\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_ + 1);\n\n        uint16[] memory array = new uint16[](maxValidRange_);\n        for (uint16 i = 0; i < maxValidRange_; i++) {\n            array[i] = i + 1;\n        }\n\n        uint16 temp;\n\n        for (uint256 i = array.length - 1; i > 0; i--) {\n            uint256 j = uint256(keccak256(abi.encodePacked(_randomNumber, i))) % i;\n            temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\n            winningNumbers[i] = array[i];\n        }\n\n        winningNumbers[sizeOfLottery_] = (uint16(_randomNumber) % powerBallRange_) + 1;\n        return winningNumbers;\n    }\n\n    function validateTicketNumbers(uint8 _numberOfTickets, uint16[] memory _numbers) internal view {\n        require(_numberOfTickets <= 50, \"Batch mint too large\");\n        require(_numbers.length == _numberOfTickets * (sizeOfLottery_ + 1), \"Invalid chosen numbers\");\n\n        for (uint256 i = 0; i < _numbers.length; i++) {\n            uint256 k = i % (sizeOfLottery_ + 1);\n            if (k == sizeOfLottery_) {\n                require(_numbers[i] > 0 && _numbers[i] <= powerBallRange_, \"out of range: power number\");\n            } else {\n                require(_numbers[i] > 0 && _numbers[i] <= maxValidRange_, \"out of range: number\");\n            }\n            if (k > 0 && k != sizeOfLottery_) {\n                for (uint256 j = i - k; j <= i - 1; j++) {\n                    require(_numbers[i] != _numbers[j], \"duplicate number\");\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IRandomNumberGenerator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IRandomNumberGenerator {\n    /**\n     * Requests randomness from a user-provided seed\n     */\n    function getRandomNumber(uint256 lotteryId) external returns (bytes32 requestId);\n}\n"
    },
    "contracts/interfaces/ITicket.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ITicket {\r\n    //-------------------------------------------------------------------------\r\n    // VIEW FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function getTotalSupply() external view returns (uint256);\r\n\r\n    function getTicketNumbers(uint256 _ticketID) external view returns (uint16[] memory);\r\n\r\n    function getOwnerOfTicket(uint256 _ticketID) external view returns (address);\r\n\r\n    function getTicketClaimStatus(uint256 _ticketID) external view returns (bool);\r\n\r\n    //-------------------------------------------------------------------------\r\n    // STATE MODIFYING FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function batchMint(\r\n        address _to,\r\n        uint256 _lottoID,\r\n        uint8 _numberOfTickets,\r\n        uint16 _maxValidRange,\r\n        uint16[] calldata _numbers\r\n    ) external returns (uint256[] memory);\r\n\r\n    function claimTicket(uint256 _ticketId, uint256 _lotteryId) external returns (bool);\r\n\r\n    function countMatch(\r\n        uint256 _lotteryId,\r\n        uint16 _maxValidRange,\r\n        uint16[] calldata _winningNumbers\r\n    ) external view returns (uint256[] memory results);\r\n}\r\n"
    },
    "contracts/utils/Testable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.6.0 <= 0.8.4;\r\n\r\nimport \"./Timer.sol\";\r\n\r\n/**\r\n * @title Base class that provides time overrides, but only if being run in test mode.\r\n */\r\nabstract contract Testable {\r\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\r\n    // Note: this variable should be set on construction and never modified.\r\n    address public timerAddress;\r\n\r\n    /**\r\n     * @notice Constructs the Testable contract. Called by child contracts.\r\n     * @param _timerAddress Contract that stores the current time in a testing environment.\r\n     * Must be set to 0x0 for production environments that use live time.\r\n     */\r\n    constructor(address _timerAddress) {\r\n        timerAddress = _timerAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts if not running in test mode.\r\n     */\r\n    modifier onlyIfTest {\r\n        require(timerAddress != address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the current time.\r\n     * @dev Will revert if not running in test mode.\r\n     * @param time timestamp to set current Testable time to.\r\n     */\r\n    function setCurrentTime(uint256 time) external onlyIfTest {\r\n        Timer(timerAddress).setCurrentTime(time);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\r\n     * Otherwise, it will return the block timestamp.\r\n     * @return uint for the current Testable timestamp.\r\n     */\r\n    function getCurrentTime() public view returns (uint256) {\r\n        if (timerAddress != address(0x0)) {\r\n            return Timer(timerAddress).getCurrentTime();\r\n        } else {\r\n            return block.timestamp;\r\n        }\r\n    }\r\n}"
    },
    "contracts/interfaces/IPrizeReservePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IPrizeReservePool {\r\n    /**\r\n     * Funding a minimal amount when prize pool is empty\r\n     * @param amount amount of IRON to be set as prize\r\n     */\r\n    function fund(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/utils/Timer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.6.0 <= 0.8.4;\r\n\r\n/**\r\n * @title Universal store of current contract time for testing environments.\r\n */\r\ncontract Timer {\r\n    uint256 private currentTime;\r\n\r\n    constructor() {\r\n        currentTime = block.timestamp; \r\n    }\r\n\r\n    /**\r\n     * @notice Sets the current time.\r\n     * @dev Will revert if not running in test mode.\r\n     * @param time timestamp to set `currentTime` to.\r\n     */\r\n    function setCurrentTime(uint256 time) external {\r\n        currentTime = time;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\r\n     * Otherwise, it will return the block timestamp.\r\n     * @return uint256 for the current Testable timestamp.\r\n     */\r\n    function getCurrentTime() public view returns (uint256) {\r\n        return currentTime;\r\n    }\r\n}"
    },
    "contracts/PrizeReservePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IPrizeReservePool.sol\";\nimport \"./interfaces/IERC20Burnable.sol\";\n\ncontract PrizeReservePool is Ownable {\n    using SafeERC20 for IERC20Burnable;\n    IERC20Burnable public titan_;\n    address public lottery_;\n\n    constructor(address _titan, address _lottery) {\n        require(_titan != address(0), \"!address\");\n        require(_lottery != address(0), \"!address\");\n        titan_ = IERC20Burnable(_titan);\n        lottery_ = _lottery;\n    }\n\n    modifier onlyLottery() {\n        require(address(msg.sender) == lottery_, \"Caller is not the lottery\");\n        _;\n    }\n\n    function setLottery(address _lottery) external onlyOwner {\n        lottery_ = _lottery;\n    }\n\n    function balance() external view returns (uint256) {\n        return titan_.balanceOf(address(this));\n    }\n\n    function fund(uint256 amount) external onlyLottery {\n        titan_.safeTransfer(lottery_, amount);\n    }\n\n    function burn(uint256 amount) external onlyOwner {\n        titan_.burn(amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Ticket.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"./interfaces/ILottery.sol\";\r\n\r\ncontract Ticket is ERC1155, Ownable {\r\n    // Libraries\r\n\r\n    // State variables\r\n    address internal lotteryContract_;\r\n\r\n    uint256 internal totalSupply_;\r\n\r\n    // Storage for ticket information\r\n    struct TicketInfo {\r\n        address owner;\r\n        uint16[] numbers;\r\n        bool claimed;\r\n        uint256 lotteryId;\r\n    }\r\n    // Token ID => Token information\r\n    mapping(uint256 => TicketInfo) internal ticketInfo_;\r\n    // lottery ID => tickets count\r\n    mapping(uint256 => uint256) internal ticketsCount_;\r\n    // User address => Lottery ID => Ticket IDs\r\n    mapping(address => mapping(uint256 => uint256[])) internal userTickets_;\r\n\r\n    // These stated is fixed due to technical implementation\r\n    // Lottery size, power number not included\r\n    uint8 public constant sizeOfLottery_ = 4;\r\n    // support 2 numbers match, if require 3 numbers match, use value of 5\r\n    // uint8 public constant sizeOfIndex_ = 5;\r\n    // lotteryId => hash => count\r\n    // the hash is combined from ticked numbers\r\n    mapping(uint256 => mapping(uint256 => uint256)) internal ticketHashes_;\r\n\r\n    //-------------------------------------------------------------------------\r\n    // EVENTS\r\n    //-------------------------------------------------------------------------\r\n\r\n    event InfoBatchMint(address indexed receiving, uint256 lotteryId, uint256 amountOfTokens, uint256[] tokenIds);\r\n\r\n    //-------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    //-------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice  Restricts minting of new tokens to only the lotto contract.\r\n     */\r\n    modifier onlyLotto() {\r\n        require(msg.sender == lotteryContract_, \"Only Lotto can mint\");\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // CONSTRUCTOR\r\n    //-------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param   _uri A dynamic URI that enables individuals to view information\r\n     *          around their NFT token. To see the information replace the\r\n     *          `\\{id\\}` substring with the actual token type ID. For more info\r\n     *          visit:\r\n     *          https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     * @param   _lotto The address of the lotto contract. The lotto contract has\r\n     *          elevated permissions on this contract.\r\n     */\r\n    constructor(string memory _uri, address _lotto) ERC1155(_uri) {\r\n        // Only Lotto contract will be able to mint new tokens\r\n        lotteryContract_ = _lotto;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // VIEW FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @param   _ticketID: The unique ID of the ticket\r\n     * @return  uint32[]: The chosen numbers for that ticket\r\n     */\r\n    function getTicketNumbers(uint256 _ticketID) external view returns (uint16[] memory) {\r\n        return ticketInfo_[_ticketID].numbers;\r\n    }\r\n\r\n    /**\r\n     * @param   _ticketID: The unique ID of the ticket\r\n     * @return  address: Owner of ticket\r\n     */\r\n    function getOwnerOfTicket(uint256 _ticketID) external view returns (address) {\r\n        return ticketInfo_[_ticketID].owner;\r\n    }\r\n\r\n    function getTicketClaimStatus(uint256 _ticketID) external view returns (bool) {\r\n        return ticketInfo_[_ticketID].claimed;\r\n    }\r\n\r\n    function getTicketClaimStatuses(uint256[] calldata ticketIds) external view returns (bool[] memory ticketStatuses) {\r\n        ticketStatuses = new bool[](ticketIds.length);\r\n        for (uint256 i = 0; i < ticketIds.length; i++) {\r\n            ticketStatuses[i] = ticketInfo_[ticketIds[i]].claimed;\r\n        }\r\n    }\r\n\r\n    function getUserTickets(uint256 _lotteryId, address _user) external view returns (uint256[] memory) {\r\n        return userTickets_[_user][_lotteryId];\r\n    }\r\n\r\n    function getListTicketNumbers(uint256[] calldata ticketIds)\r\n        external\r\n        view\r\n        returns (uint256[] memory ticketNumbers, uint256 sizeOfLottery)\r\n    {\r\n        sizeOfLottery = sizeOfLottery_ + 1;\r\n        ticketNumbers = new uint256[](ticketIds.length * sizeOfLottery);\r\n        for (uint256 i = 0; i < ticketIds.length; i++) {\r\n            uint16[] memory ticketNumber = ticketInfo_[ticketIds[i]].numbers;\r\n            if (ticketNumber.length != sizeOfLottery) {\r\n                ticketNumber = new uint16[](sizeOfLottery);\r\n            }\r\n            for (uint256 j = 0; j < ticketNumber.length; j++) {\r\n                ticketNumbers[sizeOfLottery * i + j] = ticketNumber[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    function getNumberOfTickets(uint256 _lotteryId) external view returns (uint256) {\r\n        return ticketsCount_[_lotteryId];\r\n    }\r\n\r\n    function getUserTicketsPagination(\r\n        address _user,\r\n        uint256 _lotteryId,\r\n        uint256 cursor,\r\n        uint256 size\r\n    ) external view returns (uint256[] memory, uint256) {\r\n        uint256 length = size;\r\n        if (length > userTickets_[_user][_lotteryId].length - cursor) {\r\n            length = userTickets_[_user][_lotteryId].length - cursor;\r\n        }\r\n        uint256[] memory values = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userTickets_[_user][_lotteryId][cursor + i];\r\n        }\r\n        return (values, cursor + length);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // STATE MODIFYING FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param   _to The address being minted to\r\n     * @param   _numberOfTickets The number of NFT's to mint\r\n     * @notice  Only the lotto contract is able to mint tokens.\r\n        // uint8[][] calldata _lottoNumbers\r\n     */\r\n    function batchMint(\r\n        address _to,\r\n        uint256 _lotteryId,\r\n        uint8 _numberOfTickets,\r\n        uint16 _maxValidRange,\r\n        uint16[] calldata _numbers\r\n    ) external onlyLotto() returns (uint256[] memory) {\r\n        // Storage for the amount of tokens to mint (always 1)\r\n        uint256[] memory amounts = new uint256[](_numberOfTickets);\r\n        // Storage for the token IDs\r\n        uint256[] memory tokenIds = new uint256[](_numberOfTickets);\r\n        for (uint8 i = 0; i < _numberOfTickets; i++) {\r\n            // Incrementing the tokenId counter\r\n            totalSupply_ = totalSupply_ + 1;\r\n            tokenIds[i] = totalSupply_;\r\n            amounts[i] = 1;\r\n            // Getting the start and end position of numbers for this ticket\r\n            uint16 start = uint16(i * (sizeOfLottery_ + 1));\r\n            uint16 end = uint16((i + 1) * (sizeOfLottery_ + 1));\r\n            // Splitting out the chosen numbers\r\n            uint16[] calldata numbers = _numbers[start:end];\r\n            // Storing the ticket information\r\n            ticketInfo_[totalSupply_] = TicketInfo(_to, numbers, false, _lotteryId);\r\n            userTickets_[_to][_lotteryId].push(totalSupply_);\r\n            indexTicket(_lotteryId, _maxValidRange, numbers);\r\n        }\r\n        // Minting the batch of tokens\r\n        _mintBatch(_to, tokenIds, amounts, msg.data);\r\n        ticketsCount_[_lotteryId] = ticketsCount_[_lotteryId] + _numberOfTickets;\r\n        // Emitting relevant info\r\n        emit InfoBatchMint(_to, _lotteryId, _numberOfTickets, tokenIds);\r\n        // Returns the token IDs of minted tokens\r\n        return tokenIds;\r\n    }\r\n\r\n    function indexTicket(\r\n        uint256 _lotteryId,\r\n        uint16 _maxValidRange,\r\n        uint16[] memory _numbers\r\n    ) internal {\r\n        uint256[2] memory indexes = generateNumberIndexKey(_maxValidRange, _numbers);\r\n        for (uint256 j = 0; j < indexes.length; j++) {\r\n            ticketHashes_[_lotteryId][indexes[j]]++;\r\n        }\r\n    }\r\n\r\n    function claimTicket(uint256 _ticketID, uint256 _lotteryId) external onlyLotto() returns (bool) {\r\n        require(ticketInfo_[_ticketID].claimed == false, \"Ticket already claimed\");\r\n        require(ticketInfo_[_ticketID].lotteryId == _lotteryId, \"Ticket not for this lottery\");\r\n        uint256 maxRange = ILottery(lotteryContract_).getMaxRange();\r\n        for (uint256 i = 0; i < ticketInfo_[_ticketID].numbers.length; i++) {\r\n            if (ticketInfo_[_ticketID].numbers[i] > maxRange) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        ticketInfo_[_ticketID].claimed = true;\r\n        return true;\r\n    }\r\n\r\n    function setLottery(address _lottery) external onlyOwner {\r\n        require(_lottery != address(0), \"Invalid address\");\r\n        lotteryContract_ = _lottery;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // INTERNAL FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    /**\r\n     * calculate the index for matching\r\n     * eg: 0x0102030402 <- mean ticket 01 02 03 04 missing 2 numbers\r\n     * eg: 0x0102030400 <- mean ticket 01 02 03 04 missing 0 numbers\r\n     * the last element is Jackpot index.\r\n     * eg: ticket 01 02 03 04 21 has index: 0x010203040021\r\n     */\r\n    function generateNumberIndexKey(uint16 _maxValidRange, uint16[] memory numbers)\r\n        public\r\n        pure\r\n        returns (uint256[2] memory result)\r\n    {\r\n        uint16 power = numbers[numbers.length - 1];\r\n        uint256 len = numbers.length - 1;\r\n        uint256 key;\r\n        for (uint256 index = 0; index < len; index++) {\r\n            key += 1 << (numbers[index] - 1);\r\n        }\r\n\r\n        result[0] = key;\r\n        result[1] = key + (1 << _maxValidRange) * power;\r\n    }\r\n\r\n    function countMatch(\r\n        uint256 _lotteryId,\r\n        uint16 _maxValidRange,\r\n        uint16[] calldata _winningNumbers\r\n    ) external view returns (uint256[] memory results) {\r\n        results = new uint256[](sizeOfLottery_ + 1);\r\n        uint256[2] memory keys = generateNumberIndexKey(_maxValidRange, _winningNumbers);\r\n        uint256 match4Key = keys[0];\r\n        uint256 jackpotKey = keys[1];\r\n        results[0] = ticketHashes_[_lotteryId][jackpotKey];\r\n        results[1] = ticketHashes_[_lotteryId][match4Key] - results[0];\r\n\r\n        // count match 3 numbers\r\n        // remove each number and replace with others\r\n        uint256 key;\r\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\r\n            uint256 base = match4Key - (1 << (_winningNumbers[i] - 1));\r\n            for (uint256 j = 1; j < _maxValidRange + 1; j++) {\r\n                if (j == _winningNumbers[i]) {\r\n                    continue;\r\n                }\r\n                key = 1 << (j - 1);\r\n\r\n                if ((key & base) == 0) {\r\n                    results[2] += ticketHashes_[_lotteryId][base + key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/interfaces/ILottery.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface ILottery {\n    //-------------------------------------------------------------------------\n    // VIEW FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    function getMaxRange() external view returns (uint32);\n\n    //-------------------------------------------------------------------------\n    // STATE MODIFYING FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    function numbersDrawn(\n        uint256 _lotteryId,\n        bytes32 _requestId,\n        uint256 _randomNumber\n    ) external;\n\n    function costToBuyTickets(uint256 _lotteryId, uint256 _numberOfTickets) external view returns (uint256 totalCost);\n}\n"
    },
    "contracts/RandomNumberGenerator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/dev/VRFConsumerBase.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILottery.sol\";\n\ncontract RandomNumberGenerator is VRFConsumerBase, Ownable {\n    bytes32 internal keyHash;\n    uint256 internal fee;\n    address internal requester;\n    uint256 public randomResult;\n    uint256 public currentLotteryId;\n\n    address public lottery;\n\n    modifier onlyLottery() {\n        require(msg.sender == lottery, \"Only Lottery can call function\");\n        _;\n    }\n\n    constructor(\n        address _vrfCoordinator,\n        address _linkToken,\n        address _lottery,\n        bytes32 _keyHash,\n        uint256 _fee\n    ) VRFConsumerBase(_vrfCoordinator, _linkToken) {\n        keyHash = _keyHash;\n        fee = _fee;\n        lottery = _lottery;\n    }\n\n    /**\n     * Requests randomness from a user-provided seed\n     */\n    function getRandomNumber(uint256 lotteryId) public onlyLottery returns (bytes32 requestId) {\n        require(keyHash != bytes32(0), \"Must have valid key hash\");\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n        requester = msg.sender;\n        currentLotteryId = lotteryId;\n        return requestRandomness(keyHash, fee);\n    }\n\n    function setLottery(address _lottery) external onlyOwner {\n        lottery = _lottery;\n    }\n\n    function withdrawAllLink() external onlyOwner {\n        LINK.transfer(msg.sender, LINK.balanceOf(address(this)));\n    }\n\n    function setFee(uint256 _fee) external onlyOwner {\n        fee = _fee;\n    }\n\n    /**\n     * Callback function used by VRF Coordinator\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        ILottery(requester).numbersDrawn(currentLotteryId, requestId, randomness);\n        randomResult = randomness;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/dev/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    internal\n    virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(\n    bytes32 _keyHash,\n    uint256 _fee\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(\n    address _vrfCoordinator,\n    address _link\n  ) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    external\n  {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/dev/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash,\n    uint256 _vRFInputSeed\n  )\n    internal\n    pure\n    returns (\n      bytes32\n    )\n  {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}